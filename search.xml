<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>async的用法和异常捕获</title>
    <url>/2023/03/21/await%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/</url>
    <content><![CDATA[<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>async 函数返回一个 Promise 对象，可以使用 then 方法添加回调函数。当函数执行的时候，一旦遇到 await 就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStockPriceByName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> symbol <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getStockSymbol</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> stockPrice <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getStockPrice</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> stockPrice<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 以下是两种调用getStockPriceByName的方法</span>
<span class="token comment">// 方法一</span>
<span class="token function">getStockPriceByName</span><span class="token punctuation">(</span><span class="token string">'goog'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 方法二</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
 <span class="token keyword">const</span> result <span class="token operator">=</span>  <span class="token keyword">await</span> <span class="token function">getStockPriceByName</span><span class="token punctuation">(</span><span class="token string">'goog'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>下面是另一个例子，指定多少毫秒后输出一个值。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token parameter">ms</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// async function timeout(ms) &#123;</span>
<span class="token comment">//  await new Promise((resolve) => &#123;</span>
<span class="token comment">//    setTimeout(resolve, ms);</span>
<span class="token comment">//  &#125;);</span>
<span class="token comment">//&#125;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncPrint</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> ms</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">await</span> <span class="token function">timeout</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">asyncPrint</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面代码指定 50 毫秒以后，输出 hello world。</p>
<p>async 函数有多种使用形式。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 函数声明</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment">// 函数表达式</span>
<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 箭头函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>async 函数返回一个 Promise 对象</p>
<p>async 函数内部 return 语句返回的值，会成为 then 方法回调函数的参数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// "hello world"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>async 函数内部抛出错误，会导致返回的 Promise 对象变为 reject 状态。抛出的错误对象会被 catch 方法回调函数接收到</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"出错了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"resolve"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"reject1"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//reject Error: 出错了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>可以像上面的方法中处理错误<br>防止出错的方法，也是将其放在 try…catch 代码块之中。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"出错了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="使用注意点"><a href="#使用注意点" class="headerlink" title="使用注意点"></a>使用注意点</h3><p>第一点，运行结果可能是 rejected，所以最好把 await 命令放在 try…catch 代码块中</p>
<p>第二点，多个 await 命令后面的异步操作，如果不存在继发关系，最好让它们同时触发。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 写法一</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">getFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 写法二</span>
<span class="token keyword">let</span> fooPromise <span class="token operator">=</span> <span class="token function">getFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> barPromise <span class="token operator">=</span> <span class="token function">getBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token keyword">await</span> fooPromise<span class="token punctuation">;</span>
<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token keyword">await</span> barPromise<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>第三点，await 命令只能用在 async 函数之中，如果用在普通函数，就会报错。<br>如果在循环中使用 await 不能使用 forEach 循环，而应该使用 for 循环；</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">dbFuc</span><span class="token punctuation">(</span><span class="token parameter">db</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//这里不需要 async</span>
  <span class="token keyword">let</span> docs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">// 可能得到错误结果</span>
  docs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">doc</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面代码可能不会正常工作，原因是这时三个 db.post()操作将是并发执行，也就是同时执行，而不是继发执行。正确的写法是采用 for 循环。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">dbFuc</span><span class="token punctuation">(</span><span class="token parameter">db</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> docs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> doc <span class="token keyword">of</span> docs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/03/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new &quot;My New Post&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>红宝书</title>
    <url>/2023/03/09/book/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="3-1-语法"><a href="#3-1-语法" class="headerlink" title="3.1 语法"></a>3.1 语法</h2><p>javascript 区分大小写</p>
<p>标识符：第一个字符必须是一个字母、下划线或者美元符号，其他字符可以是字母下划线美元符号或数字</p>
<p>注释：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 单行注释</span>

<span class="token comment">/*
 * 这是一个多行块注释
 *
 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>严格模式：”use strict”</p>
<p>语句：语句以一个分号结尾；条件控制语句建议使用代码块让编码意图更清晰</p>
<h2 id="3-2-关键字和保留字"><a href="#3-2-关键字和保留字" class="headerlink" title="3.2 关键字和保留字"></a>3.2 关键字和保留字</h2><p>略</p>
<h2 id="3-3-变量"><a href="#3-3-变量" class="headerlink" title="3.3 变量"></a>3.3 变量</h2><p>ECMAScript 的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">"hi"</span><span class="token punctuation">;</span>
message <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 有效，但不推荐</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="3-4-数据类型"><a href="#3-4-数据类型" class="headerlink" title="3.4 数据类型"></a>3.4 数据类型</h2><p>5 种基本的数据类型：Undefined、Null、Boolean、Number、String<br>1 中简单的复杂类型 Object</p>
<h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><table>
<thead>
<tr>
<th>结果（string）</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>“undefined”</td>
<td><font color='#CD6600'>如果这个值未定义</font></td>
</tr>
<tr>
<td>“boolean”</td>
<td>如果这个值是布尔值</td>
</tr>
<tr>
<td>“string”</td>
<td>如果这个值是字符串</td>
</tr>
<tr>
<td>“number”</td>
<td>如果这个值是数值</td>
</tr>
<tr>
<td>“object”</td>
<td>如果这个值是对象或 <font color='#CD6600'>null</font></td>
</tr>
<tr>
<td>“function”</td>
<td>如果这个值是函数</td>
</tr>
</tbody></table>
<h3 id="Undefined-类型"><a href="#Undefined-类型" class="headerlink" title="Undefined 类型"></a>Undefined 类型</h3><p>Undefined 类型只有一个值，即特殊的 undefined<br>声明变量但是未对其初始化时，这个变量的值就是 undefined</p>
<p>注意：对未初始化的变量执行 typeof 操作符会返回 undefined 值，而对未声明的变量执行 typeof 操作符同样也会返回 undefined 值。</p>
<p>但是未初始化的变量执行 typeof 也会返回 undefined 值</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> message<span class="token punctuation">;</span> <span class="token comment">// 声明了变量但没有赋值 默认为undefined</span>

<span class="token comment">// 下面这个变量并没有声明</span>
<span class="token comment">// var age</span>

<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "undefined"</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "undefined"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Null-类型"><a href="#Null-类型" class="headerlink" title="Null 类型"></a>Null 类型</h3><p>从逻辑角度来看，null 值表示一个空对象指针<br>实际上，undefined 值是派生自 null 值的</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> car<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "object"</span>

<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Boolean-类型"><a href="#Boolean-类型" class="headerlink" title="Boolean 类型"></a>Boolean 类型</h3><p>该类型只有两个字面值：true 和 false。</p>
<p>转型函数 Boolean() 可将值转化为 Boolean 值</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>转换为 true 的值</th>
<th>转换为 false 的值</th>
</tr>
</thead>
<tbody><tr>
<td>Boolean</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>String</td>
<td>任何非空字符串</td>
<td>“”（空字符串）</td>
</tr>
<tr>
<td>Number</td>
<td>任何非零数字值（包括无穷大）</td>
<td>0 和 NaN</td>
</tr>
<tr>
<td>Object</td>
<td>任何对象</td>
<td>null</td>
</tr>
<tr>
<td>Undefined</td>
<td>n&#x2F;a</td>
<td>undefined</td>
</tr>
</tbody></table>
<h3 id="Number-类型"><a href="#Number-类型" class="headerlink" title="Number 类型"></a>Number 类型</h3><p>不同的数值字面量格式 ；八进制字面值的第一位必须是零（0）；十六进制前两位必须是 0x</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> intNum <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span> <span class="token comment">// 整数 十进制</span>
<span class="token keyword">var</span> octalNum1 <span class="token operator">=</span> <span class="token number">070</span><span class="token punctuation">;</span> <span class="token comment">// 八进制的 56</span>
<span class="token keyword">var</span> hexNum1 <span class="token operator">=</span> <span class="token number">0xa</span><span class="token punctuation">;</span> <span class="token comment">// 十六进制的 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="浮点数值"><a href="#浮点数值" class="headerlink" title="浮点数值"></a>浮点数值</h4><p>如果浮点数值本身表示的就是一个整数（如 1.0），那么该值会被转换为整数，节省内存空间</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> floatNum1 <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> floatNum2 <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span> <span class="token comment">// 整数——解析为 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>对于那些极大或极小的数值，可以用 e 表示法（即科学计数法）表示的浮点数值表示</p>
<p>ECMASctipt 会将那些小数点后面带有 6 个零以上的浮点数值转换为以 e 表示法表示的数值</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> floatNum <span class="token operator">=</span> <span class="token number">3.125e7</span><span class="token punctuation">;</span> <span class="token comment">// 等于 31250000</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0.0000003</span><span class="token punctuation">;</span> <span class="token comment">// 会被转换成 3e-7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h4><p><code>Number.MIN_VALUE</code> 5e-324</p>
<p><code>Number.MAX_VALUE</code> 1.7976931348623157e+308</p>
<p>超出最大的值会自动转化成 Infinity 负数转化为-Infinity</p>
<p><code>isFinite()</code>函数，想确定一个数值是不是位于最小和最大的数值之间</p>
<h4 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h4><p>NaN，即非数值（Not a Number）是一个特殊的数值</p>
<p>NaN 与任何值都不相等，包括 NaN 本身</p>
<p><code>isNaN()</code>函数：确定这个参数是否“不是数值”</p>
<p>任何不能被转换为数值的值都会导致这个函数返回 true。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false（10 是一个数值）</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false（可以被转换成数值 10）</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true（不能转换成数值）</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false（可以被转换成数值 1）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>字符串<code>&quot;blue&quot;</code>不能被转换成数值，因此函数返回了 true。由于 Boolean 值 true 可以转换成数值 1，因此函数返回 false。</p>
<h4 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h4><p>Number()</p>
<ol>
<li><p>如果是 Boolean 值，true 和 false 将分别被转换为 1 和 0。</p>
</li>
<li><p>如果是数字值，只是简单的传入和返回。</p>
</li>
<li><p>如果是 null 值，返回 0。</p>
</li>
<li><p><font color='#CD6600'>如果是 undefined，返回 NaN</font>。</p>
</li>
<li><p>如果是字符串，遵循下列规则</p>
<ol>
<li>是数字就转化成 Number 类型的数字，</li>
<li>如果是 16 进制的字符串转化为相同大小的十进制整</li>
<li>如果字符串是空的（不包含任何字符），则将其转换为 0</li>
<li>其他转化为 NaN 数值；</li>
</ol>
</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//NaN</span>
<span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0</span>
<span class="token keyword">var</span> num3 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"000011"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//11</span>
<span class="token keyword">var</span> num4 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>parseInt()</p>
<ol>
<li>它会忽略字符串前面的空格，直至找到第一个非空格字符。如果第一个字符不是数字字符或者负号，parseInt()就会返回 NaN；</li>
<li><font color='#CD6600'>parseInt()转换空字符串会返回 NaN</font></li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"1234blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1234</span>
<span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token keyword">var</span> num3 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"0xA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10（十六进制数）</span>
<span class="token keyword">var</span> num4 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">22.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 22</span>
<span class="token keyword">var</span> num5 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"070"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 56（八进制数）</span>
<span class="token keyword">var</span> num6 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"70"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 70（十进制数）</span>
<span class="token keyword">var</span> num7 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"0xf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15（十六进制数）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>parseInt() 的第二个参数指定转化的基数 即按照某一基数转化</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2 （按二进制解析）</span>
<span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//8 （按八进制解析）</span>
<span class="token keyword">var</span> num3 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10 （按十进制解析）</span>
<span class="token keyword">var</span> num4 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//16 （按十六进制解析）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>parseFloat()</p>
<ol>
<li><p>parseFloat()也是从第一个字符（位置 0）开始解析每个字符。而且也是一直解析到字符串末尾，或者解析到遇见一个无效的浮点数字字符为止。</p>
</li>
<li><p>parseFloat()只解析十进制值</p>
</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"1234blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1234 （整数）</span>
<span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"0xA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0</span>
<span class="token keyword">var</span> num3 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"22.5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//22.5</span>
<span class="token keyword">var</span> num4 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"22.34.5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//22.34</span>
<span class="token keyword">var</span> num5 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"0908.5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//908.5</span>
<span class="token keyword">var</span> num6 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"3.125e7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//31250000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h3><h4 id="1-字符字面量"><a href="#1-字符字面量" class="headerlink" title="1.字符字面量"></a>1.字符字面量</h4><p>String 数据类型包含一些特殊的字符字面量，也叫转义序列，用于表示非打印字符</p>
<h4 id="2-字符串的特点"><a href="#2-字符串的特点" class="headerlink" title="2.字符串的特点"></a>2.字符串的特点</h4><p>ECMAScript 中的字符串是不可变的，也就是说，字符串一旦创建，它们的值就不能改变。要改变某个变量保存的字符串，首先要<strong>销毁</strong>原来的字符串</p>
<h4 id="3-转换为字符串"><a href="#3-转换为字符串" class="headerlink" title="3.转换为字符串"></a>3.转换为字符串</h4><p>toString()方法</p>
<ol>
<li><font color='#CD6600'>null 和 undefined 值没有这个方法</font>。</li>
<li>toString()可以输出以二进制、八进制、十六进制，乃至其他任意有效进制格式表示的字符串值。</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "10"</span>
<span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "1010"</span>
<span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "12"</span>
<span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "10"</span>
<span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "a"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>String() 方法</p>
<ol>
<li>如果值有 toString()方法，则调用该方法（没有参数）并返回相应的结果；</li>
<li>如果值是 null，则返回”null”；</li>
<li>如果值是 undefined，则返回”undefined”。</li>
</ol>
<h3 id="Object-类型"><a href="#Object-类型" class="headerlink" title="Object 类型"></a>Object 类型</h3><p>Object 的每个实例都具有下列属性和方法</p>
<ol>
<li>constructor：保存着用于创建当前对象的函数。对于前面的例子而言，构造函数（constructor）就是 Object()。</li>
<li>hasOwnProperty(propertyName)：用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名（propertyName）必须以字符串形式指定（例如：o.hasOwnProperty(“name”)）。</li>
<li>isPrototypeOf(object)：用于检查传入的对象是否是传入对象的原型（第 5 章将讨论原型）。</li>
<li>propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用 for-in 语句（本章后面将会讨论）来枚举。与 hasOwnProperty()方法一样，作为参数的属性名必须以字符<br>串形式指定。</li>
<li>toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应。</li>
<li>toString()：返回对象的字符串表示。</li>
<li>valueOf()：返回对象的字符串、数值或布尔值表示。通常与 toString()方法的返回值相同。</li>
</ol>
]]></content>
      <categories>
        <category>book</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>你不知道的javascript</title>
    <url>/2023/03/09/book/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84javascript/</url>
    <content><![CDATA[<h1 id="第一章-作用域是什么"><a href="#第一章-作用域是什么" class="headerlink" title="第一章 作用域是什么"></a>第一章 作用域是什么</h1><h2 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h2><ul>
<li>分词&#x2F;词法分析 （Tokenizing&#x2F;Lexing）<br>将代码字符串分解成有意义的代码块，这些代码块称为<strong>词法单元</strong>（token）</li>
<li>解析&#x2F;语法分析 （Parsing）<br>这个过程是将<strong>词法单元流</strong>转化成一个由元素逐级嵌套所组成的代表了程序语法结构的树。这个树被称为“抽象语法树”（Abstract Syntax Tree，<strong>AST</strong>）</li>
<li>代码生成<br>将 AST 转换为可执行代码的过程称被称为代码生成</li>
</ul>
<h2 id="理解作用域"><a href="#理解作用域" class="headerlink" title="理解作用域"></a>理解作用域</h2><ul>
<li>引擎<br>负责整个javascript程序的编译及执行</li>
<li>编译器<br>负责语法缝隙及代码生成</li>
<li>作用域<br>确定当前执行的代码对这些标识符的访问权限</li>
</ul>
<p>变量的赋值操作会执行两个动作，首先编译器会在当前作用域中声明一个变量（如<br>果之前没有声明过），然后在运行时引擎会在作用域中查找该变量，如果能够找到就会对<br>它赋值。</p>
<p>RHS:  谁是赋值操作的源头 retrieve his source value（取到它的源值）<br>LHS:  赋值操作的目标是谁</p>
<h2 id="作用域嵌套"><a href="#作用域嵌套" class="headerlink" title="作用域嵌套"></a>作用域嵌套</h2><p>引擎从当前的执行作用域开始查找变量，如果找不到，<br>就向上一级继续查找。当抵达最外层的全局作用域时，无论找到还是没找到，查找过程都<br>会停止</p>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul>
<li><p>ReferenceError<br>执行LHS查询时 在作用域寻找不到变量 引擎就会抛出该错误</p>
</li>
<li><p>TypeError<br>对一个非函数类型的值进行函数调用<br>引用null或undefined类型的值中的属性</p>
<pre class="line-numbers language-none"><code class="language-none">var a &#x3D; 2;
a(); &#x2F;&#x2F; TypeError

var b
b.length; &#x2F;&#x2F; TypeError<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>小测验</p>
<pre class="line-numbers language-none"><code class="language-none">function foo(a)&#123;
  var b &#x3D; a;
  return a + b;
&#125;
var c &#x3D; foo(2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<ol>
<li><p>找出所有的 LHS 查询（这里有 3 处！）<br>c &#x3D; ..; 、 a &#x3D; 2 （隐式变量分配）、 b &#x3D; ..</p>
</li>
<li><p>找出所有的 RHS 查询（这里有 4 处！）<br>foo(2.. 、 &#x3D; a; 、 a .. 、 .. b</p>
</li>
</ol>
]]></content>
      <categories>
        <category>book</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>node 学习（自用）</title>
    <url>/2023/03/09/node/node%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%87%AA%E7%94%A8%EF%BC%89/</url>
    <content><![CDATA[<h2 id="2-fs-文件系统模块"><a href="#2-fs-文件系统模块" class="headerlink" title="2 fs 文件系统模块"></a>2 fs 文件系统模块</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2-1-读取文件中的指定内容"><a href="#2-1-读取文件中的指定内容" class="headerlink" title="2.1 读取文件中的指定内容"></a>2.1 读取文件中的指定内容</h3><p>fs.readFile() 语法格式</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">,</span>options<span class="token punctuation">]</span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>path：路径<br>options：编码格式<br>callback：读完文件后拿到的结果</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./files/11.txt"</span><span class="token punctuation">,</span> <span class="token string">"utf8"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> dataStr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"读取文件失败！"</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"文件读取成功，内容是："</span> <span class="token operator">+</span> dataStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-2-fs-向指定文件中写入内容"><a href="#2-2-fs-向指定文件中写入内容" class="headerlink" title="2.2 fs 向指定文件中写入内容"></a>2.2 fs 向指定文件中写入内容</h3><pre class="line-numbers language-none"><code class="language-none">fs.writeFile(file,data[,options]) ,callback<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>file：文件内容<br>data：写入的内容<br>options：写入内容的格式<br>callback：写完文件后拿到的结果</p>
<pre class="line-numbers language-none"><code class="language-none">fs.writeFile(&#39;.&#x2F;files&#x2F;22.txt&#39;, &#39;Hello Node.js&#39;, function (err) &#123;
  if (err) &#123;
    return console.log(&#39;文件写入失败！&#39; + err.message)
  &#125;
  console.log(&#39;文件写入成功！&#39;)
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-3-fs-模块路径动态拼接的问题"><a href="#2-3-fs-模块路径动态拼接的问题" class="headerlink" title="2.3 fs 模块路径动态拼接的问题"></a>2.3 fs 模块路径动态拼接的问题</h3><p>在使用 fs 模块操作文件时，如果提供的操作路径是以<code>./</code>或<code>../</code>开头的相对路径时，很容易出现路径动态拼写错误的问题<br>原因：代码在运行的 1 时候，会执行 node 命令所处的目录，动态拼接出被操作文件的完整路径。</p>
<p>解决方法：直接提供一个完整的文件存放路径</p>
<p><code>__dirname</code>表示当前目录所处的目录</p>
<h2 id="3-path-路径模块"><a href="#3-path-路径模块" class="headerlink" title="3 path 路径模块"></a>3 path 路径模块</h2><h3 id="3-1-什么是-path-路径模块"><a href="#3-1-什么是-path-路径模块" class="headerlink" title="3.1 什么是 path 路径模块"></a>3.1 什么是 path 路径模块</h3><p>path 模块是 Node.js 官方提供的、用来处理路径的模块。他提供了一系列的方法和属性，用来满足用户对路径的处理需求。<br>path.join()方法，用来将多个路径拼接成一个完整的路径字符串<br>path.basename()方法，用来从字符串中，解析出文件名</p>
<p>导入</p>
<pre class="line-numbers language-none"><code class="language-none">const path &#x3D; require(&#39;path&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="3-2-路径拼接"><a href="#3-2-路径拼接" class="headerlink" title="3.2 路径拼接"></a>3.2 路径拼接</h3><pre class="line-numbers language-none"><code class="language-none">const  pathStr &#x3D; path.join(&#39;&#x2F;a&#39;,&#39;&#x2F;b&#x2F;c&#39;,&#39;..&#x2F;..&#x2F;&#39;,&#39;.&#x2F;d&#39;,&#39;e&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>注意 ..&#x2F;会抵消前面的路径</p>
<p>路径拼接的时候尽量使用 path.join()方法而不是字符串的拼接方法。</p>
<h3 id="3-3-获取文件中的文件名"><a href="#3-3-获取文件中的文件名" class="headerlink" title="3.3 获取文件中的文件名"></a>3.3 获取文件中的文件名</h3><pre class="line-numbers language-none"><code class="language-none">path.basename(path[,ext])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>path 必选参数，表示路径的字符串<br>ext 可选参数，表示文件的扩展名<br>返回 表示路径中的最后一部分</p>
<h3 id="3-4-获取路径文件中的文件扩展名"><a href="#3-4-获取路径文件中的文件扩展名" class="headerlink" title="3.4 获取路径文件中的文件扩展名"></a>3.4 获取路径文件中的文件扩展名</h3><pre class="line-numbers language-none"><code class="language-none">path.extname(path)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>path 必选参数，表示路径字符串<br>返回 返回得到扩展名字符串</p>
<h3 id="3-5-综合案例"><a href="#3-5-综合案例" class="headerlink" title="3.5 综合案例"></a>3.5 综合案例</h3><p>注意<br>fs.writeFile()方法只能用来创建路径<br>重复调用 fs.writeFile()写入同一个文件，新写入的内容会覆盖之前旧的内容。</p>
<h2 id="4-http-模块"><a href="#4-http-模块" class="headerlink" title="4 http 模块"></a>4 http 模块</h2><h3 id="4-1-什么是-http-模块"><a href="#4-1-什么是-http-模块" class="headerlink" title="4.1 什么是 http 模块"></a>4.1 什么是 http 模块</h3><p>在网络节点中，负责消费资源的电脑，叫做客户端；**<em>负责对外提供网络资源的电脑</em>**，叫做服务器。</p>
<p>http 模块是 Node.js 官方提供的、用来创建 web 服务器的模块。通过 http 模块提供的 <code>http.createServer()</code> 方法，就<br>能方便的把一台普通的电脑，变成一台 Web 服务器，从而对外提供 Web 资源服务。</p>
<pre class="line-numbers language-none"><code class="language-none">const http &#x3D; require(&#39;http&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="4-2-进一步理解-http-模块的作用"><a href="#4-2-进一步理解-http-模块的作用" class="headerlink" title="4.2 进一步理解 http 模块的作用"></a>4.2 进一步理解 http 模块的作用</h3><p>服务器和普通电脑的区别在于，服务器上安装了 web 服务器软件，例如：IIS、Apache 等。通过安装这些服务器软件，<br>就能把一台普通的电脑变成一台 web 服务器。</p>
<p>在 Node.js 中，我们不需要使用 IIS、Apache 等这些第三方 web 服务器软件。因为我们可以基于 Node.js 提供的<br>http 模块，通过几行简单的代码，就能轻松的手写一个服务器软件，从而对外提供 web 服务。</p>
<h3 id="4-3-服务器相关的概念"><a href="#4-3-服务器相关的概念" class="headerlink" title="4.3 服务器相关的概念"></a>4.3 服务器相关的概念</h3><ol>
<li><p>IP 地址<br>IP 地址就是互联网上每台计算机的唯一地址，因此 IP 地址具有唯一性。如果把“个人电脑”比作“一台电话”，那么“IP 地址”就相当于“电话号码”，只有在知道对方 IP 地址的前提下，才能与对应的电脑之间进行数据通信。<br>IP 地址的格式：通常用“点分十进制”表示成（a.b.c.d）的形式，其中，a,b,c,d 都是 0~255 之间的十进制整数。例如：用点分十进表示的 IP 地址（192.168.1.1）<br>注意：<br>① <font color=red>互联网中每台 Web 服务器，都有自己的 IP 地址</font>，例如：大家可以在 Windows 的终端中运行 ping <a href="http://www.baidu.com/">www.baidu.com</a> 命<br>令，即可查看到百度服务器的 IP 地址。<br>② 在开发期间，自己的电脑既是一台服务器，也是一个客户端，为了方便测试，可以在自己的浏览器中输入 <code>127.0.0.1</code> 这个<br>IP 地址，就能把自己的电脑当做一台服务器进行访问了。</p>
</li>
<li><p>域名和域名服务器<br>尽管 IP 地址能够唯一地标记网络上的计算机，但 IP 地址是一长串数字，不直观，而且不便于记忆，于是人们又发明了另一套<br>字符型的地址方案，即所谓的<font color=red>域名（Domain Name）地址</font>。<br>IP 地址和域名是一一对应的关系，这份对应关系存放在一种叫做域名服务器(DNS，Domain name server)的电脑中。使用者<br>只需通过好记的域名访问对应的服务器即可，对应的转换工作由域名服务器实现。因此，<font color=red>域名服务器就是提供 IP 地址和域名之间的转换服务的服务器</font>。<br>注意：<br>① 单纯使用 IP 地址，互联网中的电脑也能够正常工作。但是有了域名的加持，能让互联网的世界变得更加方便。<br>② 在开发测试期间， <code>127.0.0.1</code> 对应的域名是 <code>localhost</code>，它们都代表我们自己的这台电脑，在使用效果上没有任何区别。</p>
</li>
<li><p>端口号<br>计算机中的端口号，就好像是现实生活中的门牌号一样。通过门牌号，外卖小哥可以在整栋大楼众多的房间中，准确把外卖送到你的手中。<br>同样的道理，在一台电脑中，可以运行成百上千个 web 服务。每个 web 服务都对应一个唯一的端口号。客户端发送过来的网络请求，通过端口号，可以被准确地交给对应的 web 服务进行处理。<br>注意：<br>① 每个端口号不能同时被多个 web 服务占用。<br>② 在实际应用中，URL 中的<font color=red>80 端口可以被省略</font>。</p>
</li>
</ol>
<h3 id="4-4-创建最基本的-web-服务器"><a href="#4-4-创建最基本的-web-服务器" class="headerlink" title="4.4 创建最基本的 web 服务器"></a>4.4 创建最基本的 web 服务器</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url<span class="token punctuation">;</span>
  <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method<span class="token punctuation">;</span>
  <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">your request url is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,and request method is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>method<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Someone visit our web server"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"serve running at http://127.0.0.1:8081"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>解决中文乱码问题</p>
<pre class="line-numbers language-none"><code class="language-none">res.setHeader(&#39;Content-Type&#39;, &#39;text&#x2F;html; charset&#x3D;utf-8&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>4.6 案例-实现读取文件的内容并响应到客户端</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 获取到客户端请求的url</span>
  <span class="token keyword">let</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url<span class="token punctuation">;</span>
  <span class="token comment">// 把请求的url地址映射到具体的地址</span>
  <span class="token keyword">const</span> fPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 根据映射的文件路径读取文件内容</span>
  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>fPath<span class="token punctuation">,</span> <span class="token string">"utf8"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> dataStr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 文件读取失败，响应错误信息</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"404 not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 文件读取成功，将读取成功的内容响应到客户端</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8081"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><h2 id="1-模块化的基本概念"><a href="#1-模块化的基本概念" class="headerlink" title="1. 模块化的基本概念"></a>1. 模块化的基本概念</h2><p>模块化是指解决一个复杂问题时，自顶向下逐层<font color=red>把系统划分成若干模块的过程</font>。对于整个系统来说，<font color=skyblue>模块是可组合、分解和更换的单元</font>。</p>
<p>编程领域中的模块化，就是遵守固定的规则，把一个大文件拆成独立并互相依赖的多个小模块。把代码进行模块化拆分的好处：<br>① 提高了代码的复用性<br>② 提高了代码的可维护性<br>③ 可以实现按需加载\</p>
<p>1.2 模块化规范<br><font color=red>模块化规范</font>就是对代码进行模块化的拆分与组合时，需要遵守的那些规则。</p>
<p>模块化规范的好处：大家都遵守同样的模块化规范写代码，降低了沟通的成本，极大方便了各个模块之间的相互调用，<br>利人利己</p>
<h2 id="2-Node-js-中的模块化"><a href="#2-Node-js-中的模块化" class="headerlink" title="2. Node.js 中的模块化"></a>2. Node.js 中的模块化</h2><p>2.1 Node.js 中模块的分类<br>Node.js 中根据模块来源的不同，将模块分为了 3 大类，分别是：</p>
<ul>
<li><p><font color=red>内置模块</font>（内置模块是由 Node.js 官方提供的，例如 fs、path、http 等）</p>
</li>
<li><p><font color=red>自定义模块</font>（用户创建的每个 .js 文件，都是自定义模块）</p>
</li>
<li><p><font color=red>第三方模块</font>（由第三方开发出来的模块，并非官方提供的内置模块，也不是用户创建的自定义模块，使用前需要先下载）</p>
<p>2.2 加载模块<br>使用<code>require()</code>方法，可以加在以上三种模块<br><font color=red>注意：</font>使用 require() 方法加载其它模块时，会执行被加载模块中的代码。</p>
<p>2.3 Node.js 中的模块作用域<br>和函数作用域类似，在自定义模块中定义的变量、方法等成员，<font color=red>只能在当前模块内被访问</font>，这种模块级别的访问限制，叫做模块作用域</p>
<p>2.4 向外共享模块作用域中的成员</p>
</li>
</ul>
<ol>
<li><p>module 对象<br>在每一个.js 自定义模块中都有一个 module 对象，它存储了当前模块有关的信息，打印如下。<br><img src="https://img-blog.csdnimg.cn/644c49dcd1c345dbb5b74009ef5d6a71.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6ZmM5LiK54Of6Zuo5a-S,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
</li>
<li><p>module.exports 对象<br>在自定义模块中可以使用 module.exports 对象，将模块内部成员共享出去，工外界使用。外界用 require()方法导入自定义模块时，得到的就是 module.exports 所指向的对象。</p>
</li>
<li><p>共享成员时的注意点<br>使用 require()方法导入模块时，导入的结果永远以<code>module.exports</code>指向的对象为主</p>
</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">exports.username &#x3D; &#39;zs&#39;,
module.exports &#x3D; &#123;
	gender: &#39;男&#39;,
	age: 22
&#125;

&#x2F;&#x2F; &#123;gender: &#39;男&#39;,age: 22&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">module.exports.username &#x3D; &#39;zs&#39;,
exports &#x3D; &#123;
	gender: &#39;男&#39;,
	age: 22
&#125;

&#x2F;&#x2F; &#123;username : &#39;zs&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">exports.username &#x3D; &#39;zs&#39;,
module.exports. gender &#x3D;  &#39;&#39;男
&#x2F;&#x2F; &#123;username : &#39;zs&#39; , gender: &#39;男&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">
exports &#x3D; &#123;
	gender: &#39;男&#39;,
	age: 22
&#125;
module.exports&#x3D; exports
&#x2F;&#x2F; &#123;username : &#39;zs&#39; , gender: &#39;男‘’, age: 22&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>exports 对象<br>exportd 和 module.exports 指向同一个对象<br>由于 module.exports 单词写起来比较复杂，为了简化向外共享成员的代码，Node 提供了 exports 对象。默认情况下，exports 和 module.exports 指向同一个对象。最终共享的结果，还是以 module.exports 指向的对象为准</li>
</ol>
<p>2.5 Node.js 中的模块化规范</p>
<p>Node.js 遵循了 <code>CommonJS</code> 模块化规范，CommonJS 规定了模块的特性和各模块之间如何相互依赖。<br>CommonJS 规定：<br>① 每个模块内部，<code>module</code> 变量代表当前模块。<br>② module 变量是一个对象，它的 exports 属性（即 <code>module.exports</code>）对外的接口。<br>③ 加载某个模块，其实是加载该模块的 module.exports 属性。require() 方法用于加载模块。</p>
<h2 id="3-npm-与包"><a href="#3-npm-与包" class="headerlink" title="3. npm 与包"></a>3. npm 与包</h2><p>3.1 包</p>
<ol>
<li>什么是包<br>Node.js 中的第三方模块又叫做包。<br>就像电脑和计算机指的是相同的东西，第三方模块和包指的是同一个概念，只不过叫法不同。</li>
<li>包的来源<br>不同于 Node.js 中的内置模块与自定义模块，包是由第三方个人或团队开发出来的，免费供所有人使用。<br>注意：Node.js 中的包都是免费且开源的，不需要付费即可免费下载使用</li>
<li>为什么需要包<br>由于 Node.js 的内置模块仅提供了一些底层的 API，导致在基于内置模块进行项目开发的时，效率很低。<br><font color=red>包是基于内置模块封装出来的</font>，提供了更高级、更方便的 API，极大的提高了开发效率。 包和内置模块之间的关系，类似于 jQuery 和 浏览器内置 API 之间的关系</li>
</ol>
<ul>
<li><p>从 <a href="https://www.npmjs.com/">https://www.npmjs.com/</a> 网站上搜索自己所需要的包</p>
</li>
<li><p>从 <a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a> 服务器上下载自己需要的包</p>
<p>3.3 包管理配置文件</p>
</li>
</ul>
<ol start="3">
<li>快速创建 package.json<br>npm 包管理工具提供了一个快捷命令，可以在执行命令时所处的目录中，快速创建 package.json 这个包管理</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">npm init -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>① 上述命令只能在英文的目录下成功运行！所以，项目文件夹的名称一定要使用英文命名，不要使用中文，不能出现空格。<br>② 运行 npm install 命令安装包的时候，npm 包管理工具会自动把包的名称和版本号，记录到 package.json 中。</p>
<ol start="4">
<li>dependencies<br>dependencies 专门用来记录您使用 npm install 命令安装了哪些包。</li>
<li>devDependencies 节点<br>如果某些包只在项目开发阶段会用到，在项目上线之后不会用到，则建议把这些包记录到 devDependencies 节点中。<br>与之对应的，如果某些包在开发和项目上线之后都需要用到，则建议把这些包记录到 ddependencies 节点中</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 将包记录到devDdependencies节点中
&#x2F;&#x2F; 简写
npm i 包名 -D
&#x2F;&#x2F; 完整写法
npm install 包名 --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3.4 解决下包速度慢的问题</p>
<p>利用镜像</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 查看当前的下包镜像
npm config get registry
&#x2F;&#x2F; 将下包的镜像源切换为淘宝镜像源
npm config set registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>nrm<br>为了更方便的切换下包的镜像源，我们可以安装 nrm 这个小工具，利用 nrm 提供的终端命令，可以快速查看和切换下包的镜像源。</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 安装nrm
nrm i nrm -g
&#x2F;&#x2F; 查看所有可用的镜像
nrm ls
&#x2F;&#x2F;将下包的镜像源切换成tabboo镜像
nrm use taobao<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3.8 发布包</p>
<ol>
<li><p>注册 npm 账号<br>① 访问 <a href="https://www.npmjs.com/">https://www.npmjs.com/</a> 网站，点击 sign up 按钮，进入注册用户界面<br>② 填写账号相关的信息：Full Name、Public Email、Username、Password<br>③ 点击 Create an Account 按钮，注册账号<br>④ 登录邮箱，点击验证链接，进行账号的验证</p>
</li>
<li><p>登录 npm 账号<br>npm 账号注册完成后，可以在终端中执行 npm login 命令，依次输入用户名、密码、邮箱后，即可登录成功。<br><font color=red>注意</font>：在运行 npm login 命令之前，必须<br>先把下包的服务器地址切换为 npm 的官方服务器。否则会导致发布包失败</p>
</li>
<li><p>把包发布到 npm 上<br>将终端切换到包的根目录之后，运行 npm publish 命令，即可将包发布到 npm 上（注意：包名不能雷同）。</p>
</li>
<li><p>删除已发布的包<br>运行 npm unpublish 包名 –force 命令，即可从 npm 删除已发布的包</p>
</li>
</ol>
<h2 id="4-模块的加载机制"><a href="#4-模块的加载机制" class="headerlink" title="4. 模块的加载机制"></a>4. 模块的加载机制</h2><p>4.1 优先从缓存中加载<br>模块在第一次加载后会被缓存。 这也意味着多次调用 require() 不会导致模块的代码被执行多次。<br>注意：不论是内置模块、用户自定义模块、还是第三方模块，它们都会优先从缓存中加载，从而提高模块的加载效率</p>
<p>4.2 内置模块的加载机制<br>内置模块是由 Node.js 官方提供的模块，内置模块的加载优先级最高。</p>
<p>4.3 自定义模块的加载机制<br>使用 require() 加载自定义模块时，必须指定以 .&#x2F; 或 ..&#x2F; 开头的路径标识符。在加载自定义模块时，如果没有指定 .&#x2F; 或 ..&#x2F; 这样的路径标识符，则 node 会把它当作内置模块或第三方模块进行加载。<br>同时，在使用 require() 导入自定义模块时，如果省略了文件的扩展名，则 Node.js 会按顺序分别尝试加载以下的文件：<br>① 按照确切的文件名进行加载<br>② 补全 .js 扩展名进行加载<br>③ 补全 .json 扩展名进行加载<br>④ 补全 .node 扩展名进行加载<br>⑤ 加载失败，终端报错</p>
<p>4.4 第三方模块的加载机制<br>如果传递给 require() 的模块标识符不是一个内置模块，也没有以 ‘.&#x2F;’ 或 ‘..&#x2F;’ 开头，则 Node.js 会从当前模块的父目录开始，尝试从 &#x2F;node_modules 文件夹中加载第三方模块。<br>如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到文件系统的根目录。</p>
<p>4.5 目录作为模块<br>当把目录作为模块标识符，传递给 require() 进行加载的时候，有三种加载方式：<br>① 在被加载的目录下查找一个叫做 package.json 的文件，并寻找 main 属性，作为 require() 加载的入口<br>② 如果目录里没有 package.json 文件，或者 main 入口不存在或无法解析，则 Node.js 将会试图加载目录下的 index.js 文件。<br>③ 如果以上两步都失败了，则 Node.js 会在终端打印错误消息，报告模块的缺失：Error: Cannot find module ‘xxx’</p>
<h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><h3 id="1-初识-Express"><a href="#1-初识-Express" class="headerlink" title="1. 初识 Express"></a>1. 初识 Express</h3><p>1.1 Express 简介</p>
<ol>
<li>什么是 Express<br>官方给出的概念：Express 是基于 Node.js 平台，快速、开放、极简的 Web 开发框架。<br>通俗的理解：Express 的作用和 Node.js 内置的 http 模块类似，<font color=red>是专门用来创建 Web 服务器的</font>。<br>Express 的本质：就是一个 npm 上的第三方包，提供了快速创建 Web 服务器的便捷方法</li>
</ol>
<p>1.2 Express 的基本使用</p>
<p>安装</p>
<pre class="line-numbers language-none"><code class="language-none">npm i express@4.17.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 通过 app.get() 方法，可以监听客户端的 GET 请求</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"zs"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">"男"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 通过 app.post() 方法，可以监听客户端的 POST 请求</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"ls"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">"男"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 通过 res.send() 方法，可以把处理好的内容，发送给客户端</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 通过 req.query 对象，可以访问到客户端通过查询字符串的形式，发送到服务器的参数</span>
  <span class="token comment">// ?name=zs&amp;age=20</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 通过 req.params 对象，可以访问到 URL 中，通过 : 匹配到的动态参数：</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user/:id"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用express.static() 方法，快速的对外提供静态资源</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/abc"</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">"./clock"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">"./files"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 可以通过 http://127.0.0.1:8081/abc/index.html 访问clock中的文件</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"serve running at http://127.0.0.1:8081"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h3><ol>
<li><p>为什么要使用 nodemon<br>在编写调试 Node.js 项目的时候，如果修改了项目的代码，则需要频繁的手动 close 掉，然后再重新启动，非常繁琐。<br>现在，我们可以使用 nodemon（<a href="https://www.npmjs.com/package/nodemon%EF%BC%89">https://www.npmjs.com/package/nodemon）</a> 这个工具，它能够监听项目文件<br>的变动，当代码被修改后，nodemon 会自动帮我们重启项目，极大方便了开发和调试</p>
</li>
<li><p>安装 nodemon</p>
</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">npm install -g nodemon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="3">
<li>使用 nodemon</li>
</ol>
<p>运行 node app.js 命令 —&gt; nodemon app.js 来启动项目。</p>
<pre class="line-numbers language-none"><code class="language-none">node app.js
&#x2F;&#x2F; 改为
nodemon app.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="2-Express-路由"><a href="#2-Express-路由" class="headerlink" title="2. Express 路由"></a>2. Express 路由</h3><p>2.1 路由的概念</p>
<ol>
<li><p>什么是路由<br>广义上来讲，路由就是映射关系</p>
</li>
<li><p>Express 中的路由<br>在 Express 中，路由指的是客户端的请求与服务器处理函数之间的映射关系</p>
</li>
</ol>
<p>2.2 路由的使用</p>
<ol>
<li>最简单的用法</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 挂载路由</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"hello word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"post request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"serve running at http://127.0.0.1:8081"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>模块化路由<br>① 创建路由模块对应的 .js 文件<br>② 调用 express.Router() 函数创建路由对象<br>③ 向路由对象上挂载具体的路由<br>④ 使用 module.exports 向外共享路由对象<br>⑤ 使用 app.use() 函数注册路由模块</li>
</ol>
<blockquote>
<p>03_router.js</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user/list"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"get user list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user/add"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Add new user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  router<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>模块化路由.js</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> router <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./03_router"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// app.use是用来注册全局中间件的  统一加上前缀</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"serve running at http://127.0.0.1:8081"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-Express-中间件"><a href="#3-Express-中间件" class="headerlink" title="3. Express 中间件"></a>3. Express 中间件</h3><p>3.1 中间件的概念</p>
<ol>
<li>什么是中间件<br>中间件（Middleware ），特指业务流程的中间处理环节</li>
<li>中间件的格式</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">app.get(&#39;&#x2F;&#39;,function(req,res,next)&#123;
	next();
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>next 函数的作用<br>next 函数是实现多个中间件连续调用的关键，它表示把流转关系转交给下一个中间件或路由。</li>
</ol>
<p>3.2 中间件初体验 4. 定义中间件函数</p>
<pre class="line-numbers language-none"><code class="language-none">const mw &#x3D; function (req, res, next) &#123;
  console.log(&#39;中间件&#39;)
  next();
&#125;
app.use(mw)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li>定义全局中间件的简化形式</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 简化版的中间件
app.use(function (req, res, next) &#123;
  console.log(&#39;这是一个最简单的中间件函数&#39;)
  next()
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="6">
<li>中间件的作用<br>多个中间件之间，<strong>共享同一份 req 和 res</strong>。基于这样的特性，我们可以在上游的中间件中，统一为 req 或 res 对象添<br>加自定义的属性或方法，供下游的中间件或路由进行使用。</li>
<li>定义多个全局中间件<br>可以使用 app.use() 连续定义多个全局中间件。客户端请求到达服务器之后，会按照中间件定义的先后顺序依次进行调用。</li>
<li>局部生效的中间件</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">app.get(&#39;&#x2F;&#39;, mw1, (req, res) &#x3D;&gt; &#123;
  res.send(&#39;hello word&#39; + req.startTime);
&#125;)
app.get(&#39;&#x2F;&#39;, mw1, mw2, (req, res) &#x3D;&gt; &#123;
  res.send(&#39;hello word&#39; + req.startTime);
&#125;)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="8">
<li>了解中间件的 5 个使用注意事项<br>① 一定要在路由之前注册中间件<br>② 客户端发送过来的请求，可以连续调用多个中间件进行处理<br>③ 执行完中间件的业务代码之后，不要忘记调用 next() 函数<br>④ 为了防止代码逻辑混乱，调用 next() 函数后不要再写额外的代码<br>⑤ 连续调用多个中间件时，多个中间件之间，共享 req 和 res 对象</li>
</ol>
<p>3.3 中间件的分类</p>
<ul>
<li>应用级别的中间件</li>
<li>路由级别的中间件</li>
<li>错误级别的中间件</li>
<li>express 内置中间件</li>
<li>第三方中间件</li>
</ul>
<ol>
<li>应用级别的中间件<br>通过 app.use() 或 app.get() 或 app.post() ，绑定到 app 实例上的中间件，叫做应用级别的中间件</li>
<li>路由级别的中间件<br>绑定到 express.Router() 实例上的中间件，叫做路由级别的中间件。它的用法和应用级别中间件没有任何区别。</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">router.use(function(req,res,next)&#123;
	console.log(&#39;time:&#39;,Date.new())
	next();
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>错误级别的中间件</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">app.use((err, req, res, next) &#x3D;&gt; &#123;
  console.log(&#39;捕获错误&#39;)
  res.send(err.message)
  next()
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>Express 内置的中间件<br>① express.static 快速托管静态资源的内置中间件，例如： HTML 文件、图片、CSS 样式等（无兼容性）<br>② express.json 解析 JSON 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）<br>③ express.urlencoded 解析 URL-encoded 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="5">
<li>第三方的中间件<br>例如使用 body-parser</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">npm i body-parser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"body-parser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="6">
<li>自定义解析表单的中间件</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"querystring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 自定义中间件的具体逻辑</span>
  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    str <span class="token operator">+=</span> chunk<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> data <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>body <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8081"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="7">
<li>自定义中间件的模块化<blockquote>
<p>12_custom-body-parser.js</p>
</blockquote>
</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"querystring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">bodyParser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    str <span class="token operator">+=</span> chunk<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    req<span class="token punctuation">.</span>body <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用qs.prase方法，把查询到的字符串解析为对象</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> bodyParser<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"querystring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 引入中间件</span>
<span class="token keyword">const</span> customBodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./12_custom-body-parser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用自定义的中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>customBodyParser<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8081"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-使用-Express-写接口"><a href="#4-使用-Express-写接口" class="headerlink" title="4. 使用 Express 写接口"></a>4. 使用 Express 写接口</h3><p>4.5 CORS 跨域资源共享</p>
<ol>
<li><p>接口的跨域问题<br>解决接口跨域问题的方案主要有两种：<br>① CORS（主流的解决方案，推荐使用）<br>② JSONP（有缺陷的解决方案：只支持 GET 请求）</p>
</li>
<li><p>使用 cors 中间件解决跨域问题<br>① 运行 npm install cors 安装中间件<br>② 使用 const cors &#x3D; require(‘cors’) 导入中间件<br>③ 在路由之前调用 app.use(cors()) 配置中间件</p>
</li>
<li><p>CORS 响应头部 - Access-Control-Allow-Origin</p>
</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">res.setHeader(&#39;Access-Control-Allow-Origin&#39;,&#39;http:&#x2F;&#x2F;itcast.cn&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>通配符 *，表示允许来自任何域的请求，</p>
<pre class="line-numbers language-none"><code class="language-none">res.setHeader(&#39;Access-Control-Allow-Origin&#39;,&#39;*&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="4">
<li>CORS 响应头部 - Access-Control-Allow-Headers<br>默认情况下，CORS 仅支持客户端向服务器发送如下的 9 个请求头：<br>Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width 、<br>Content-Type （值仅限于 text&#x2F;plain、multipart&#x2F;form-data、application&#x2F;x-www-form-urlencoded 三者之一）<br>如果客户端向服务器发送了额外的请求头信息，则需要在服务器端，通过 Access-Control-Allow-Headers 对额外<br>的请求头进行声明，否则这次请求会失败！</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">res.setHeader(&#39;Access-Control-Allow-Headers&#39;,&#39;Content-Type,X-Custom-Header&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="5">
<li>CORS 响应头部 - Access-Control-Allow-Methods<br>默认情况下，CORS 仅支持客户端发起 GET、POST、HEAD 请求。<br>如果客户端希望通过 PUT、DELETE 等方式请求服务器的资源，则需要在服务器端，通过 Access-Control-Alow-Methods<br>来指明实际请求所允许使用的 HTTP 方法。</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 只允许post get post head 请求
res.setHeader(&#39;Access-Control-Allow-Methods&#39;,&#39;POST&#39;,&#39;GET&#39;,&#39;DELETE&#39;,&#39;HEAD&#39;);
&#x2F;&#x2F; 允许所有的http请求方法
res.setHeader(&#39;Access-Control-Allow-Methods&#39;,&#39;*&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="6">
<li><p>CORS 请求的分类<br>客户端在请求 CORS 接口时，根据请求方式和请求头的不同，可以将 CORS 的请求分为两大类，分别是：<br>① 简单请求<br>② 预检请求</p>
</li>
<li><p>简单请求<br>同时满足以下两大条件的请求，就属于简单请求：<br>① 请求方式：GET、POST、HEAD 三者之一<br>② HTTP 头部信息不超过以下几种字段：无自定义头部字段、Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width 、Content-Type（只有三个值 application&#x2F;x-www-formurlencoded、multipart&#x2F;form-data、text&#x2F;plain）</p>
</li>
<li><p>预检请求<br>只要符合以下任何一个条件的请求，都需要进行预检请求：<br>① 请求方式为 GET、POST、HEAD 之外的请求 Method 类型<br>② 请求头中包含自定义头部字段<br>③ 向服务器发送了 application&#x2F;json 格式的数据<br>在浏览器与服务器正式通信之前，浏览器会先发送 OPTION 请求进行预检，以获知服务器是否允许该实际请求，所以这一<br>次的 OPTION 请求称为“预检请求”。服务器成功响应预检请求后，才会发送真正的请求，并且携带真实数据。</p>
</li>
<li><p>简单请求和预检请求的区别<br>简单请求的特点：客户端与服务器之间只会发生一次请求。<br>预检请求的特点：客户端与服务器之间会发生两次请求，OPTION 预检请求成功之后，才会发起真正的请求。</p>
</li>
</ol>
<h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><h3 id="4-在项目中操作-MySQL"><a href="#4-在项目中操作-MySQL" class="headerlink" title="4. 在项目中操作 MySQL"></a>4. 在项目中操作 MySQL</h3><p>4.1 在项目中操作数据库的步骤<br>① 安装操作 MySQL 数据库的第三方模块（mysql）<br>② 通过 mysql 模块连接到 MySQL 数据库<br>③ 通过 mysql 模块执行 SQL 语句<br>4.2 安装与配置 mysql 模块</p>
<ol>
<li>安装</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">npm install mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>配置 mysql 模块</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">const mysql &#x3D; require(&#39;mysql&#39;);
const db &#x3D; mysql.createPool(&#123;
  host: &#39;127.0.0.1&#39;,
  user: &#39;root&#39;,
  password: &#39;1234&#39;,
  database: &quot;student&quot;
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.3 使用 mysql 模块操作 MySQL 数据库</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 查询user表中的数据
db.query(&#39;SELECT * from user&#39;, (err, result) &#x3D;&gt; &#123;
  if (err) return console.log(err.message);
  console.log(result)
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 向user表中插入一条数据
const user &#x3D; &#123; name: &#39;zhangpp&#39;, score: 20, sex: &#39;女&#39; &#125;;
const sqlStr &#x3D; &#39;insert into user (name,score,sex) values (?,?,?)&#39;;

db.query(sqlStr, [user.name, user.score, user.sex], (err, result) &#x3D;&gt; &#123;
  if (err) return console.log(err.message);
  if (result.affectedRows &#x3D;&#x3D; 1) &#123;
    console.log(&#39;插入成功&#39;)
  &#125;
  console.log(result)
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 插入一行的简单写法
const user &#x3D; &#123; name: &#39;zhangpp&#39;, score: 20, sex: &#39;女&#39; &#125;;
const sqlStr &#x3D; &#39;insert into user set ?&#39;
db.query(sqlStr, user, (err, result) &#x3D;&gt; &#123;
  if (err) return console.log(err.message);
  if (result.affectedRows &#x3D;&#x3D; 1) &#123;
    console.log(&#39;插入成功&#39;)
  &#125;
  console.log(result)
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 更新数据
const user &#x3D; &#123; id: 3, name: &#39;lll&#39;, score: 15, sex: &#39;女&#39; &#125;;
const sqlStr &#x3D; &#39;update user set name&#x3D;?,score&#x3D;? where id&#x3D;?&#39;
db.query(sqlStr, [user.name, user.score, user.id], (err, result) &#x3D;&gt; &#123;
  if (err) return console.log(err.message);
  if (result.affectedRows &#x3D;&#x3D; 1) &#123;
    console.log(&#39;修改成功&#39;)
  &#125;
  console.log(result)
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 更新数据的便捷方法
const user &#x3D; &#123; id: 3, name: &#39;lle&#39;, score: 15, sex: &#39;女&#39; &#125;;
const sqlStr &#x3D; &#39;update user set ? where id&#x3D;?&#39;
db.query(sqlStr, [user, user.id], (err, result) &#x3D;&gt; &#123;
  if (err) return console.log(err.message);
  if (result.affectedRows &#x3D;&#x3D; 1) &#123;
    console.log(&#39;修改成功&#39;)
  &#125;
  console.log(result)
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 删除数据
const sqlStr &#x3D; &quot;delete from user where id&#x3D;?&quot;
db.query(sqlStr, 3, (err, result) &#x3D;&gt; &#123;
  if (err) return console.log(err.message);
  if (result.affectedRows &#x3D;&#x3D; 1) &#123;
    console.log(&#39;删除成功&#39;)
  &#125;
  console.log(result)
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="前后端的身份认证"><a href="#前后端的身份认证" class="headerlink" title="前后端的身份认证"></a>前后端的身份认证</h3><p>5.1 Web 开发模式<br>目前主流的 Web 开发模式有两种，分别是：<br>① 基于服务端渲染的传统 Web 开发模式<br>② 基于前后端分离的新型 Web 开发模式</p>
<ol>
<li><p>服务端渲染的优缺点<br>优点：<br>① 前端耗时少。因为服务器端负责动态生成 HTML 内容，浏览器只需要直接渲染页面即可。尤其是移动端，更省电。<br>② 有利于 SEO。因为服务器端响应的是完整的 HTML 页面内容，所以爬虫更容易爬取获得信息，更有利于 SEO。<br>缺点：<br>① 占用服务器端资源。即服务器端完成 HTML 页面内容的拼接，如果请求较多，会对服务器造成一定的访问压力。<br>② 不利于前后端分离，开发效率低。使用服务器端渲染，则无法进行分工合作，尤其对于前端复杂度高的项目，不利于<br>项目高效开发</p>
</li>
<li><p>前后端分离的优缺点<br>优点：<br>① 开发体验好。前端专注于 UI 页面的开发，后端专注于 api 的开发，且前端有更多的选择性。<br>② 用户体验好。Ajax 技术的广泛应用，极大的提高了用户的体验，可以轻松实现页面的局部刷新。<br>③ 减轻了服务器端的渲染压力。因为页面最终是在每个用户的浏览器中生成的。<br>缺点：<br>① 不利于 SEO。因为完整的 HTML 页面需要在客户端动态拼接完成，所以爬虫对无法爬取页面的有效信息。（解决方<br>案：利用 Vue、React 等前端框架的 SSR （server side render）技术能够很好的解决 SEO 问题！）</p>
</li>
</ol>
<p>5.2 身份认证 3. 不同开发模式下的身份认证<br>对于服务端渲染和前后端分离这两种开发模式来说，分别有着不同的身份认证方案：<br>① 服务端渲染推荐使用 <code>Session</code> 认证机制<br>② 前后端分离推荐使用 <code>JWT</code> 认证机制</p>
<p>5.4 在 Express 中使用 Session 认证 4. 安装 express-session 中间件</p>
<pre class="line-numbers language-none"><code class="language-none">npm i express-session<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>&#x2F;&#x2F; 配置 Session 中间件</p>
<pre class="line-numbers language-none"><code class="language-none">const session &#x3D; require(&#39;express-session&#39;);
app.use(session(&#123;
  secret: &#39;zpp&#39;,
  resave: false,
  saveUninitialized: true
&#125;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可通过 req.session 来访问和使用 session 对象</p>
<pre class="line-numbers language-none"><code class="language-none">app.post(&#39;&#x2F;api&#x2F;login&#39;, (req, res) &#x3D;&gt; &#123;
  &#x2F;&#x2F; 判断用户提交的登录信息是否正确
  if (req.body.username !&#x3D;&#x3D; &#39;admin&#39; || req.body.password !&#x3D;&#x3D; &#39;000000&#39;) &#123;
    return res.send(&#123; status: 1, msg: &#39;登录失败&#39; &#125;)
  &#125;

  &#x2F;&#x2F; 登录成功后的用户信息，保存到 Session 中
  req.session.username &#x3D; req.body.username;
  req.session.isLogin &#x3D; true;
  res.send(&#123; status: 0, msg: &#39;登录成功&#39; &#125;)
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以直接从 <code>req.session</code> 对象上获取之前存储的数据</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 获取用户姓名的接口
app.get(&#39;&#x2F;api&#x2F;username&#39;, (req, res) &#x3D;&gt; &#123;
  &#x2F;&#x2F; 从 Session 中获取用户的名称，响应给客户端
  if (req.session.isLogin) &#123;
    res.send(&#123;
      status: 0,
      msg: &#39;success&#39;,
      username: req.session.username
    &#125;)
  &#125; else &#123;
    res.send(&#123;
      status: 1,
      msg: &#39;fail&#39;
    &#125;)
  &#125;
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>调用 <code>req.session.destroy()</code> 函数，即可清空服务器保存的 session 信息</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 退出登录的接口
app.post(&#39;&#x2F;api&#x2F;logout&#39;, (req, res) &#x3D;&gt; &#123;
  &#x2F;&#x2F; 清空 Session 信息
  req.session.destroy()
  res.send(&#123;
    status: 0,
    msg: &#39;退出登录成功&#39;
  &#125;)
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>5.5 JWT 认证机制</p>
<ol>
<li>什么是 JWT<br><code>JWT</code>（英文全称：JSON Web Token）是目前最流行的<strong>跨域认证解决方案</strong></li>
<li>JWT 的组成部分<br>JWT 通常由三部分组成，分别是 Header（头部）、Payload（有效荷载）、Signature（签名）。<br>三者之间使用英文的“.”分隔。</li>
<li>JWT 的三个部分各自代表的含义<br>JWT 的三个组成部分，从前到后分别是 Header、Payload、Signature。 - Payload 部分才是真正的用户信息，它是用户信息经过加密之后生成的字符串。 - Header 和 Signature 是安全性相关的部分，只是为了保证 Token 的安全性</li>
<li>JWT 的使用方式 - 客户端收到服务器返回的 JWT 之后，通常会将它储存在 localStorage 或 sessionStorage 中。 - 此后，客户端每次与服务器通信，都要带上这个 JWT 的字符串，从而进行身份认证。<br>推荐的做法是把 JWT 放在 HTTP 请求头的 Authorization 字段中，格式如下：</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">Authorization: Bearer &lt;token&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>5.6 在 Express 中使用 JWT</p>
<ol>
<li>安装 JWT 相关的包</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">npm install jsontoken express-jwt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>jsonwebtoken 用于生成 JWT 字符串</li>
<li>express-jwt 用于将 JWT 字符串解析还原成 JSON 对象</li>
</ul>
<ol start="2">
<li>导入 JWT 相关的包</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">const jwt &#x3D; require(&#39;jsonwebtoken&#39;);
const expressJWT &#x3D; require(&#39;express-jwt&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="3">
<li>定义 secret 密钥</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">const secretKey &#x3D; &#39;zhangpp&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="4">
<li>在登录成功后生成 JWT 字符串<br>调用 jsonwebtoken 包提供的 sign() 方法，将用户的信息加密成 JWT 字符串，响应给客户端：</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">const tokenStr &#x3D; jwt.sign(&#123;
   username: userinfo.username
 &#125;, secretKey, &#123; expiresIn: &#39;60s&#39; &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li>将 JWT 字符串还原为 JSON 对象<br>服务器可以通过 express-jwt 这个中间件，自动将客户端发送过来的 Token 解析还原成 JSON 对象</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">app.use(expressJWT(&#123;
  secret: secretKey, algorithms: [&quot;HS256&quot;],
  credentialsRequired: false
&#125;).unless(&#123; path: [&#39;&#x2F;api&#x2F;login&#39;] &#125;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="6">
<li>使用 req.user 获取用户信息</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">app.get(&#39;&#x2F;admin&#x2F;getinfo&#39;, function (req, res) &#123;
  &#x2F;&#x2F; 使用 req.user 获取用户信息，并使用 data 属性将用户信息发送给客户端
  console.log(&#39;admin&#39;)
  const user &#x3D; req.user
  console.log(&#39;username: &#39;, user);
  res.send(&#123;
    status: 200,
    message: &#39;获取用户信息成功！&#39;,
    data: req.user  &#x2F;&#x2F; 要发送给客户端的用户信息
  &#125;)
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="7">
<li>捕获解析 JWT 失败后产生的错误</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">app.use((err, req, res, next) &#x3D;&gt; &#123;
  &#x2F;&#x2F; 这次错误是由token解析失败导致的
  if (err.name &#x3D;&#x3D;&#x3D; &#39;UnauthorizedError&#39;) &#123;
    return res.send(&#123;
      status: 401,
      message: &#39;无效的token&#39;,

    &#125;)
  &#125; else &#123;
    res.send(&#123;
      status: 500,
      message: &#39;未知的错误&#39;,
    &#125;)
  &#125;
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>全部代码</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 导入 express 模块
const express &#x3D; require(&#39;express&#39;)
&#x2F;&#x2F; 创建 express 的服务器实例
const app &#x3D; express()

&#x2F;&#x2F; TODO_01：安装并导入 JWT 相关的两个包，分别是 jsonwebtoken 和 express-jwt
const jwt &#x3D; require(&#39;jsonwebtoken&#39;);
const expressJWT &#x3D; require(&#39;express-jwt&#39;);

&#x2F;&#x2F; 允许跨域资源共享
const cors &#x3D; require(&#39;cors&#39;)
app.use(cors())

&#x2F;&#x2F; 解析 post 表单数据的中间件
const bodyParser &#x3D; require(&#39;body-parser&#39;)
app.use(bodyParser.urlencoded(&#123; extended: false &#125;))

&#x2F;&#x2F; TODO_02：定义 secret 密钥，建议将密钥命名为 secretKey
const secretKey &#x3D; &#39;zhangpp&#39;
&#x2F;&#x2F; TODO_04：注册将 JWT 字符串解析还原成 JSON 对象的中间件

app.use(expressJWT(&#123;
  secret: secretKey, algorithms: [&quot;HS256&quot;],
  credentialsRequired: false
&#125;).unless(&#123; path: [&#39;&#x2F;api&#x2F;login&#39;] &#125;))

&#x2F;&#x2F; 登录接口
app.post(&#39;&#x2F;api&#x2F;login&#39;, function (req, res) &#123;
  &#x2F;&#x2F; 将 req.body 请求体中的数据，转存为 userinfo 常量
  const userinfo &#x3D; req.body
  &#x2F;&#x2F; 登录失败
  if (userinfo.username !&#x3D;&#x3D; &#39;admin&#39; || userinfo.password !&#x3D;&#x3D; &#39;000000&#39;) &#123;
    return res.send(&#123;
      status: 400,
      message: &#39;登录失败！&#39;
    &#125;)
  &#125;
  &#x2F;&#x2F; 登录成功
  &#x2F;&#x2F; TODO_03：在登录成功之后，调用 jwt.sign() 方法生成 JWT 字符串。并通过 token 属性发送给客户端
  const tokenStr &#x3D; jwt.sign(&#123;
    username: userinfo.username
  &#125;, secretKey, &#123; expiresIn: &#39;60s&#39; &#125;)

  res.send(&#123;
    status: 200,
    message: &#39;登录成功！&#39;,
    token: tokenStr &#x2F;&#x2F; 要发送给客户端的 token 字符串
  &#125;)
&#125;)

&#x2F;&#x2F; 这是一个有权限的 API 接口
app.get(&#39;&#x2F;admin&#x2F;getinfo&#39;, function (req, res) &#123;
  &#x2F;&#x2F; TODO_05：使用 req.user 获取用户信息，并使用 data 属性将用户信息发送给客户端
  console.log(&#39;admin&#39;)
  const user &#x3D; req.user
  console.log(&#39;username: &#39;, user);
  res.send(&#123;
    status: 200,
    message: &#39;获取用户信息成功！&#39;,
    data: req.user  &#x2F;&#x2F; 要发送给客户端的用户信息
  &#125;)
&#125;)

&#x2F;&#x2F; TODO_06：使用全局错误处理中间件，捕获解析 JWT 失败后产生的错误
app.use((err, req, res, next) &#x3D;&gt; &#123;
  &#x2F;&#x2F; 这次错误是由token解析失败导致的
  if (err.name &#x3D;&#x3D;&#x3D; &#39;UnauthorizedError&#39;) &#123;
    return res.send(&#123;
      status: 401,
      message: &#39;无效的token&#39;,

    &#125;)
  &#125; else &#123;
    res.send(&#123;
      status: 500,
      message: &#39;未知的错误&#39;,
    &#125;)
  &#125;
&#125;)

&#x2F;&#x2F; 调用 app.listen 方法，指定端口号并启动web服务器
app.listen(8081, function () &#123;
  console.log(&#39;Express server running at http:&#x2F;&#x2F;127.0.0.1:8081&#39;)
&#125;)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>node</tag>
      </tags>
  </entry>
</search>
